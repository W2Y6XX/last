# LangGraph多智能体系统Kubernetes部署配置
apiVersion: apps/v1
kind: Deployment
metadata:
  name: langgraph-multi-agent
  namespace: langgraph-multi-agent
  labels:
    app: langgraph-multi-agent
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: langgraph-multi-agent
  template:
    metadata:
      labels:
        app: langgraph-multi-agent
        version: v1.0.0
    spec:
      containers:
      - name: langgraph-multi-agent
        image: langgraph-multi-agent:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: langgraph-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: langgraph-config
              key: LOG_LEVEL
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: langgraph-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: langgraph-config
              key: REDIS_URL
        - name: LANGSMITH_API_KEY
          valueFrom:
            secretKeyRef:
              name: langgraph-secrets
              key: LANGSMITH_API_KEY
        - name: LANGSMITH_PROJECT
          valueFrom:
            configMapKeyRef:
              name: langgraph-config
              key: LANGSMITH_PROJECT
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: langgraph-secrets
              key: JWT_SECRET_KEY
        - name: AUTH_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: langgraph-secrets
              key: AUTH_SECRET_KEY
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      volumes:
      - name: config-volume
        configMap:
          name: langgraph-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: langgraph-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: langgraph-logs-pvc
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Redis部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: langgraph-multi-agent
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
# PostgreSQL部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: langgraph-multi-agent
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "langgraph_db"
        - name: POSTGRES_USER
          value: "langgraph_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: langgraph-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - langgraph_user
            - -d
            - langgraph_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - langgraph_user
            - -d
            - langgraph_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts

---
# Nginx部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: langgraph-multi-agent
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: mvp2-frontend
          mountPath: /usr/share/nginx/html/mvp2
        - name: ssl-certs
          mountPath: /etc/nginx/ssl
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: langgraph-config
      - name: mvp2-frontend
        configMap:
          name: mvp2-frontend-files
      - name: ssl-certs
        secret:
          secretName: langgraph-tls