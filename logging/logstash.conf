# Logstash配置文件
input {
  # 从文件读取日志
  file {
    path => "/usr/share/logstash/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["langgraph-multi-agent"]
  }
  
  # 从Beats接收日志
  beats {
    port => 5044
  }
  
  # 从syslog接收日志
  syslog {
    port => 514
  }
}

filter {
  # 处理LangGraph应用日志
  if "langgraph-multi-agent" in [tags] {
    # 解析JSON格式的日志
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
      }
    }
    
    # 添加时间戳
    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
      }
    }
    
    # 解析日志级别
    if [level] {
      mutate {
        uppercase => [ "level" ]
      }
    }
    
    # 提取错误信息
    if [level] == "ERROR" {
      grok {
        match => { "message" => "%{GREEDYDATA:error_message}" }
      }
    }
    
    # 解析HTTP请求日志
    if [logger_name] == "uvicorn.access" {
      grok {
        match => { 
          "message" => '%{IPORHOST:client_ip} - - \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status_code} %{NUMBER:response_size} "%{DATA:referrer}" "%{DATA:user_agent}"'
        }
      }
      
      # 转换数据类型
      mutate {
        convert => { 
          "status_code" => "integer"
          "response_size" => "integer"
        }
      }
    }
    
    # 解析智能体执行日志
    if [logger_name] =~ /agent/ {
      grok {
        match => { 
          "message" => "Agent %{WORD:agent_type} executed task %{UUID:task_id} in %{NUMBER:execution_time}ms"
        }
      }
      
      mutate {
        convert => { "execution_time" => "float" }
      }
    }
    
    # 解析MVP2适配器日志
    if [logger_name] =~ /mvp2/ {
      mutate {
        add_field => { "component" => "mvp2_adapter" }
      }
    }
    
    # 添加环境标签
    mutate {
      add_field => { 
        "environment" => "${ENVIRONMENT:production}"
        "service" => "langgraph-multi-agent"
      }
    }
  }
  
  # 处理Kubernetes日志
  if [kubernetes] {
    # 解析容器日志
    if [kubernetes][container_name] {
      mutate {
        add_field => { 
          "container" => "%{[kubernetes][container_name]}"
          "pod" => "%{[kubernetes][pod_name]}"
          "namespace" => "%{[kubernetes][namespace_name]}"
        }
      }
    }
  }
  
  # 处理Nginx访问日志
  if [fields][service] == "nginx" {
    grok {
      match => { 
        "message" => '%{IPORHOST:client_ip} - %{DATA:user_name} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{DATA:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status_code} %{NUMBER:body_sent} "%{DATA:http_referer}" "%{DATA:http_user_agent}"'
      }
    }
    
    mutate {
      convert => { 
        "status_code" => "integer"
        "body_sent" => "integer"
      }
    }
  }
  
  # 地理位置解析
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # 用户代理解析
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "ua"
    }
  }
  
  # 移除不需要的字段
  mutate {
    remove_field => [ "host", "path", "tags" ]
  }
}

output {
  # 输出到Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "langgraph-multi-agent-%{+YYYY.MM.dd}"
    template_name => "langgraph-multi-agent"
    template => "/usr/share/logstash/templates/langgraph-template.json"
    template_overwrite => true
  }
  
  # 错误日志单独索引
  if [level] == "ERROR" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "langgraph-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # 性能日志单独索引
  if [execution_time] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "langgraph-performance-%{+YYYY.MM.dd}"
    }
  }
  
  # 调试输出（开发环境）
  if "${ENVIRONMENT}" == "development" {
    stdout {
      codec => rubydebug
    }
  }
}